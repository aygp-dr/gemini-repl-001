#+TITLE: GITHUB-SETUP.org - GitHub Integration
#+AUTHOR: jwalsh + Claude
#+DATE: 2025-07-14
#+STARTUP: overview

* GitHub Integration

This file creates GitHub-specific configuration including workflows, issue templates, and RFC process.

** GitHub Workflows

*** CI Workflow

#+BEGIN_SRC yaml :tangle .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm test
    
    - name: Build
      run: npm run build
#+END_SRC

*** Formal Verification Workflow

#+BEGIN_SRC yaml :tangle .github/workflows/formal-verification.yml
name: Formal Verification

on:
  push:
    paths:
      - 'specs/**'
  pull_request:
    paths:
      - 'specs/**'

jobs:
  verify:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Java for Alloy
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Download TLA+ tools
      run: |
        mkdir -p tools/formal-methods
        wget -O tools/formal-methods/tla2tools.jar https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
        
    - name: Download Alloy
      run: |
        wget -O tools/formal-methods/alloy.jar https://github.com/AlloyTools/org.alloytools.alloy/releases/download/v6.0.0/alloy.jar
    
    - name: Verify TLA+ specifications
      run: |
        java -cp tools/formal-methods/tla2tools.jar tlc2.TLC specs/interfaces.tla || true
        java -cp tools/formal-methods/tla2tools.jar tlc2.TLC specs/commands.tla || true
    
    - name: Check Alloy models
      run: |
        echo "Alloy verification would run here"
#+END_SRC

*** Release Workflow

#+BEGIN_SRC yaml :tangle .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Create Release Archive
      run: |
        mkdir -p dist
        tar -czf dist/gemini-repl-${{ github.ref_name }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.env' \
          --exclude='*.log' \
          target/ src/ package.json README.org LICENSE
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/gemini-repl-${{ github.ref_name }}.tar.gz
        generate_release_notes: true
#+END_SRC

*** Security Workflow

#+BEGIN_SRC yaml :tangle .github/workflows/security.yml
name: Security

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  push:
    branches: [ main ]

jobs:
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit
      run: npm audit --production
      
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
#+END_SRC

** Issue Templates

*** Bug Report Template

#+BEGIN_SRC markdown :tangle .github/ISSUE_TEMPLATE/bug_report.md
---
name: Bug report
about: Create a report to help us improve
title: '[BUG] '
labels: 'bug'
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Run command '...'
2. Type '....'
3. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment:**
 - OS: [e.g. macOS, Linux, Windows]
 - Node.js version: [e.g. 18.0.0]
 - Gemini REPL version: [e.g. 0.1.0]

**Additional context**
Add any other context about the problem here.
#+END_SRC

*** Feature Request Template

#+BEGIN_SRC markdown :tangle .github/ISSUE_TEMPLATE/feature_request.md
---
name: Feature request
about: Suggest an idea for this project
title: '[FEATURE] '
labels: 'enhancement'
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
#+END_SRC

*** RFC Template

#+BEGIN_SRC markdown :tangle .github/ISSUE_TEMPLATE/rfc.md
---
name: RFC (Request for Comments)
about: Propose a significant change or addition
title: '[RFC] '
labels: 'rfc'
assignees: ''

---

**RFC Title**
[Brief descriptive title]

**Summary**
[One paragraph explanation of the proposal]

**Motivation**
[Why are we doing this? What use cases does it support? What is the expected outcome?]

**Detailed Design**
[This is the bulk of the RFC. Explain the design in enough detail for somebody familiar with the codebase to understand and implement.]

**Drawbacks**
[Why should we *not* do this?]

**Alternatives**
[What other designs have been considered? What is the impact of not doing this?]

**Unresolved Questions**
[What parts of the design are still TBD?]
#+END_SRC

** Pull Request Template

#+BEGIN_SRC markdown :tangle .github/pull_request_template.md
## Description
[Provide a brief description of the changes in this PR]

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Formal specification update

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Formal verification passes (if applicable)

## Checklist
- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes

## Related Issues
Fixes #(issue number)

## Screenshots (if applicable)
[Add screenshots to help explain your changes]
#+END_SRC

** RFC Process

#+BEGIN_SRC markdown :tangle .github/rfcs/README.md
# Gemini REPL RFCs

This directory contains Requests for Comments (RFCs) for significant changes to the Gemini REPL project.

## RFC Process

1. Create a new GitHub issue using the RFC template
2. Discuss the proposal in the issue
3. Once consensus is reached, create a PR with the RFC document
4. RFC documents should be numbered sequentially (e.g., `rfc-001-feature-name.md`)
5. Accepted RFCs are merged into this directory

## RFC Status

| RFC | Title | Status | Issue |
|-----|-------|--------|-------|
| 001 | Formal Validation Framework | Draft | #1 |

## RFC Template

Use the issue template for initial proposals. Once accepted, create a detailed RFC document in this directory.
#+END_SRC

*** Initial RFC

#+BEGIN_SRC markdown :tangle .github/rfcs/rfc-001-formal-validation.md
# RFC-001: Formal Validation Framework

## Summary

Establish a formal validation framework using TLA+ and Alloy to ensure the Gemini REPL behaves correctly and safely.

## Motivation

As we build a self-modifying REPL that can execute AI-generated code, we need strong guarantees about system behavior. Formal methods provide mathematical proof of correctness.

## Design

### TLA+ Specifications

- Model the REPL state machine
- Specify command processing invariants
- Define safety properties for API interactions

### Alloy Models

- Model data structures and their constraints
- Verify structural properties
- Check for edge cases in system design

### Integration

- CI/CD pipeline runs verification on every change to specs
- Failing specs block merges to main
- Documentation links specs to implementation

## Implementation Plan

1. Define core system properties in TLA+
2. Create Alloy models for data structures
3. Set up CI/CD verification
4. Document mapping between specs and code

## Alternatives

- Property-based testing only (less rigorous)
- No formal verification (higher risk)
- Different formal methods tools

## Open Questions

- Performance impact of verification in CI/CD
- Learning curve for contributors
- Maintenance burden of keeping specs in sync
#+END_SRC

** GitHub Settings

#+BEGIN_SRC yaml :tangle .github/settings.yml
repository:
  name: gemini-repl
  description: Simple REPL interface for Gemini API in ClojureScript with formal specifications
  topics:
    - clojurescript
    - gemini-api
    - repl
    - formal-methods
    - tla-plus
    - alloy
    - literate-programming
    - shadow-cljs
  private: false
  has_issues: true
  has_projects: false
  has_wiki: false
  has_downloads: true
  default_branch: main
  allow_squash_merge: true
  allow_merge_commit: true
  allow_rebase_merge: true
  delete_branch_on_merge: true
  enable_automated_security_fixes: true
  enable_vulnerability_alerts: true

labels:
  - name: bug
    color: d73a4a
    description: Something isn't working
  - name: enhancement
    color: a2eeef
    description: New feature or request
  - name: documentation
    color: 0075ca
    description: Improvements or additions to documentation
  - name: rfc
    color: 7057ff
    description: Request for Comments
  - name: formal-methods
    color: 008672
    description: Related to TLA+ or Alloy specifications
  - name: validation
    color: d876e3
    description: Related to formal validation
  - name: tooling
    color: ffd300
    description: Development tooling and infrastructure
#+END_SRC

** GitHub CLI Scripts

#+BEGIN_SRC bash :tangle .github/scripts/manage-prs.sh :shebang #!/bin/bash
# Script to manage pull requests

set -e

case "$1" in
  "list")
    gh pr list
    ;;
  "create")
    gh pr create --title "$2" --body "$3"
    ;;
  "merge")
    gh pr merge "$2" --squash --delete-branch
    ;;
  "close")
    gh pr close "$2"
    ;;
  *)
    echo "Usage: $0 {list|create|merge|close} [args]"
    exit 1
    ;;
esac
#+END_SRC

** GitHub Command for Claude

#+BEGIN_SRC markdown :tangle .claude/commands/github.md
# GitHub Integration Command

## Purpose
Manage GitHub-related tasks including issues, PRs, and releases.

## Usage
Use this for GitHub workflow automation and management.

## Commands
- `gh issue create` - Create new issues
- `gh pr create` - Create pull requests  
- `gh release create` - Create releases
- `gh repo view` - View repository information

## Workflows
- CI/CD on push and PR
- Formal verification for spec changes
- Security scanning weekly
- Automated releases on tags

## Templates
- Bug reports
- Feature requests
- RFC proposals
- PR template with checklist

## Labels
- bug, enhancement, documentation
- rfc, formal-methods, validation
- tooling

## Process
1. Use GitHub CLI for automation
2. Follow conventional commit messages
3. Link issues to PRs
4. Use proper labels and milestones
5. RFCs for significant changes
#+END_SRC